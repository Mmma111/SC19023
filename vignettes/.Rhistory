library(Rcpp)
dir_cpp <- '../Rcpp/'
sourceCpp(paste0(dir_cpp, 'rwMetropolisC.cpp'))
library(Rcpp)
cppFunction('NumericVector rwMetropolisC(double sigma, double x0, double N) {
NumericVector x(N+1);
x[0] = x0;
NumericVector u = runif(N);
double k = 0;
double y = 0;
for (int i = 2; i < N+1; i++) {
y = rnorm(1, x[i-2], sigma)[0];
if (u[i-2] <= exp(-((abs(y))-(abs(x[i-2])))) ) {
x[i-1] = y;
}
else {
x[i-1] = x[i-2];
k++;
}
}
x[N] = k;
return(x);
}')
N <- 2000
sigma <- c(.05, .5, 2, 16)
x0 <- 25
set.seed(12345)
rwC1 <- rwMetropolisC(sigma[1], x0, N)
rwC2 <- rwMetropolisC(sigma[2], x0, N)
rwC3 <- rwMetropolisC(sigma[3], x0, N)
rwC4 <- rwMetropolisC(sigma[4], x0, N)
rwC <- cbind(rwC1[-(N+1)], rwC2[-(N+1)], rwC3[-(N+1)], rwC4[-(N+1)])
#the acceptance rates
print(c(1-rwC1[N+1]/N,1-rwC2[N+1]/N,1-rwC3[N+1]/N,1-rwC4[N+1]/N))
par(mfcol = c(2, 2))
refline <- c(log(2 * .025), -log(2 * (1 - .975)))
for (j in 1:4) {
plot(rwC[, j], type = 'l', xlab = bquote(sigma == .(round(sigma[j], 3))), ylab = 'X', ylim = range(rwC[, j]))
abline(h = refline)
}
library(DAAG); attach(ironslag)
#data(ironslag, package = "DAAG")
a <- seq(10, 40, .1)
par(mar = c(4,3,3,1)+0.1,mfrow=c(2,2))
L1 <- lm(magnetic ~ chemical)
plot(chemical, magnetic, main="Linear", pch=16)
yhat1 <- L1$coef[1] + L1$coef[2] * a
lines(a, yhat1, lwd=2)
L2 <- lm(magnetic ~ chemical + I(chemical^2))
plot(chemical, magnetic, main="Quadratic", pch=16)
yhat2 <- L2$coef[1] + L2$coef[2] * a + L2$coef[3] * a^2
lines(a, yhat2, lwd=2)
L3 <- lm(log(magnetic) ~ chemical)
plot(chemical, magnetic, main="Exponential", pch=16)
logyhat3 <- L3$coef[1] + L3$coef[2] * a
yhat3 <- exp(logyhat3)
lines(a, yhat3, lwd=2)
L4 <- lm(magnetic ~ chemical + I(chemical^2) + I(chemical^3))
plot(chemical, magnetic, main="Cubic Polynomial", pch=16)
yhat4 <- L4$coef[1] + L4$coef[2] * a + L4$coef[3] * a^2 + L4$coef[4] * a^3
lines(a, yhat4, lwd=2)
n <- length(magnetic)
e1 <- e2 <- e3 <- e4 <- numeric(n)
ey1 <- ey2 <- ey3 <- ey4 <- numeric(n)
ybar <- mean(magnetic)
for (k in 1:n) {
y <- magnetic[-k]
x <- chemical[-k]
J1 <- lm(y ~ x)
yhat1 <- J1$coef[1] + J1$coef[2] * chemical[k]
e1[k] <- magnetic[k] - yhat1
ey1[k] <- magnetic[k] - ybar
J2 <- lm(y ~ x + I(x^2))
yhat2 <- J2$coef[1] + J2$coef[2] * chemical[k] +
J2$coef[3] * chemical[k]^2
e2[k] <- magnetic[k] - yhat2
ey2[k] <- magnetic[k] - ybar
J3 <- lm(log(y) ~ x)
logyhat3 <- J3$coef[1] + J3$coef[2] * chemical[k]
yhat3 <- exp(logyhat3)
e3[k] <- magnetic[k] - yhat3
ey3[k] <- magnetic[k] - ybar
J4 <- lm(y ~ x + I(x^2) + I(x^3))
yhat4 <- J4$coef[1] + J4$coef[2] * chemical[k] + J4$coef[3] * (chemical[k]^2) + J4$coef[4] * (chemical[k]^3)
e4[k] <- magnetic[k] - yhat4
ey4[k] <- magnetic[k] - ybar
}
sigmahat2 <- c(mean(e1^2), mean(e2^2), mean(e3^2), mean(e4^2))
r2 <- c((1-sum(e1^2)/sum(ey1^2)),(1-sum(e2^2)/sum(ey2^2)),(1-sum(e3^2)/sum(ey3^2)),(1-sum(e4^2)/sum(ey4^2)))
a <- matrix(0,2,4)
a[1,] <- sigmahat2
a[2,] <- r2
colnames(a) <- c("Linear","Quadratic","Exponential","Cubic Polynomial")
rownames(a) <- c("sigmahat^2","r^2")
a
L2
