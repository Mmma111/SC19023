library(Rcpp)
dir_cpp <- '../Rcpp/'
sourceCpp(paste0(dir_cpp, 'rwMetropolisC.cpp'))
library(Rcpp)
cppFunction('NumericVector rwMetropolisC(double sigma, double x0, double N) {
NumericVector x(N+1);
x[0] = x0;
NumericVector u = runif(N);
double k = 0;
double y = 0;
for (int i = 2; i < N+1; i++) {
y = rnorm(1, x[i-2], sigma)[0];
if (u[i-2] <= exp(-((abs(y))-(abs(x[i-2])))) ) {
x[i-1] = y;
}
else {
x[i-1] = x[i-2];
k++;
}
}
x[N] = k;
return(x);
}')
N <- 2000
sigma <- c(.05, .5, 2, 16)
x0 <- 25
set.seed(12345)
rwC1 <- rwMetropolisC(sigma[1], x0, N)
rwC2 <- rwMetropolisC(sigma[2], x0, N)
rwC3 <- rwMetropolisC(sigma[3], x0, N)
rwC4 <- rwMetropolisC(sigma[4], x0, N)
rwC <- cbind(rwC1[-(N+1)], rwC2[-(N+1)], rwC3[-(N+1)], rwC4[-(N+1)])
#the acceptance rates
print(c(1-rwC1[N+1]/N,1-rwC2[N+1]/N,1-rwC3[N+1]/N,1-rwC4[N+1]/N))
par(mfcol = c(2, 2))
refline <- c(log(2 * .025), -log(2 * (1 - .975)))
for (j in 1:4) {
plot(rwC[, j], type = 'l', xlab = bquote(sigma == .(round(sigma[j], 3))), ylab = 'X', ylim = range(rwC[, j]))
abline(h = refline)
}
